sum_number = 0
while (sum_number <= 20){
i = sample(1:5, 1)
sum_number = sum_number + i
cat(sum_number, "\n")
}
sum_number = 0
while (sum_number <= 20){
i = sample(1:5, 1)
sum_number = sum_number + i
cat(sum_number, "\n")
}
sum_number = 0
while (sum_number <= 20){
i = sample(1:5, 1)
sum_number = sum_number + i
cat(sum_number, "\n")
}
sum_number = 0
while (sum_number <= 20){
i = sample(1:5, 1)
sum_number = sum_number + i
cat(sum_number, "\n")
}
sum_number = 0
while (sum_number <= 20){
i = sample(1:5, 1)
sum_number = sum_number + i
cat(sum_number, "\n")
}
repeat{
cat("A\n")
}
sum_number = 0
repeat{
i = sample(1:5, 1)
sum_number = sum_number + 1
cat(sum_number, "\n")
if (sum_number > 20){
break
}
}
sum_number = 0
repeat{
i = sample(1:5, 1)
sum_number = sum_number + i
cat(sum_number, "\n")
if (sum_number > 20){
break
}
}
sum(c(1,2,3))
print()
?function
function
?function
f1 = function() print("TEST")
f2 = function(num){print("TEST"); print(num)}
f3 = function(p="R"){print(p)}
f1
f1()
f2()
f2(); f2(100)
f2(100)
f3()
f3("python")
f3(p = "JAVA")
f1(10)
f4 = function(p1 = "A", p2){
for (i in 1:p2){
print(p1)
}
}
f4("1", 10)
f4("A", 10)
f4(p2 = 10)
f5 = function(...){
print("TEST")
data = c(...)
print(length(data))
}
f5(c(1,2,3,4,5,6))
View(f5)
?rep
rm(list=ls())
func1 = function(){
xx = 10
yy = 20
return(xx * yy)
}
func1_result = func1()
func1_result
xx
func1()
func1_result = func1()
func1_result
xx # 함수 밖에서 함수 안에서 사용된 변수에 접근할 수 없음.
xx=0
func1_1 = function(){
xx = 10
return(xx)
}
print(xx)
K = func1_1
print(K)
print(xx)
K = func1_1()
print(K)
print(xx)
func1_1 = function(){
print(xx)
xx = 10
return(xx)
}
print(xx)
xx=0
func1_1 = function(){
print(xx)
xx = 10
print(xx)
return(xx)
}
print(xx)
K = func1_1()
print(K)
print(xx)
func2 = function(x,y){
xx = x
yy = y
return(sum(xx,yy))
}
func2_result = func2(1,2)
func2_result
func3 = function(x,y){
x3 = x+1
y3 = y+1
x4 = func2(x3,y3)
return(x4)
}
func3(9,13)
func_self = function(x){
x = func_self(x)
print(x)
}
func_self(1)
func_self = function(x){
x = sum(func_self(x))
if (x > 100){
break;
}
print(x)
}
func_self(1)
exam2 = function(my_num){
result = 0
for (i in 1:my_num){
result = result + i
}
return(result)
}
rm(list=ls())
abs(10)
abs(-19)
operator = +
operator = "+"
as.character
operator_list = c("+", "-", "*", "%/%", "%%")
operator !in operator_list
operator in operator_list
operator
operator_list
# Q4
exam4 = function(num1, operator, num2){
result = 0
if (operator == "+"){
result = num1 + num2
}else if (operator == "-"){
result = num1 - num2
}else if (operator == "*"){
result = num1 * num2
}else if (operator == "%/%" | operator == "%%"){
if (num1 == 0){
print("오류 1")
}else if (num2 == 0){
print("오류 2")
}else{
if (operator == "%/%"){
result = num1 %/% num2
}else{
result = num1 %% num2
}
}
}else{
print("규격의 연산자만 전달하세요")
}
}
Q4_result = exam4(10, "+", 20)
Q4_result
Q4_result = exam4(0, "%%", 3)
Q4_result = exam4(3, "%%", 0)
Q4_result
# Q4
exam4 = function(num1, operator, num2){
result = 0
if (operator == "+"){
result = num1 + num2
}else if (operator == "-"){
result = num1 - num2
}else if (operator == "*"){
result = num1 * num2
}else if (operator == "%/%" | operator == "%%"){
if (num1 == 0){
result = "오류 1"
}else if (num2 == 0){
result = "오류 2"
}else{
if (operator == "%/%"){
result = num1 %/% num2
}else{
result = num1 %% num2
}
}
}else{
result = "규격의 연산자만 전달하세요"
}
return(result)
}
Q4_result = exam4(10, "+", 20)
Q4_result
Q4_result = exam4(0, "%%", 3)
Q4_result
Q4_result = exam4(3, "%%", 0)
Q4_result
Q4_result = exam(3, "/", 19)
Q4_result = exam4(3, "/", 19)
Q4_result
Q3_result = exam3(10, 20)
Q3_result
# Q3
exam3() = function(num1, num2){
result = 0
if (num1 > num2){
result = num1 - num2
}else if (num1 < num2){
result = num2 - num1
}else{
result = 0
}
return(result)
}
Q3_result = exam3(10, 20)
# Q3
exam3 = function(num1, num2){
result = 0
if (num1 > num2){
result = num1 - num2
}else if (num1 < num2){
result = num2 - num1
}else{
result = 0
}
return(result)
}
Q3_result = exam3(10, 20)
Q3_result
rm(list=ls())
a = c(1,2,3,4)
3 %in% a
rm(list=ls())
func4 = function(x=100, y=200, z){
return(x+y+Z)
}
func4()
func4(10,20,30)
return(x+y+z)
func4 = function(x=100, y=200, z){
return(x+y+z)
}
func4(10,20,30)
func4(z=100)
a = 3; b = 7; c = 11;
ft = function(a){
b = a + 10
c <<- a + 10
d = a
a; b; c; d
return()
}
print(ft(100))
a = 3; b = 7; c = 11;
ft = function(a){
b = a + 10
c <<- a + 10
d = a
print(a); print(b); print(c); print(d)
return()
}
print(ft(100))
a; b; c; d
sum
sum()
a = c(1,2)
a
a()
hi <- function() {
print("hi")
}
hi()
hi
string <- function(print(sting))
print(string)
print(string)
print(x)
string <- function(x){
print(x)
}
View(string)
string("안녀영")
printMyString = function(x, y, z){
print(x)
print(y)
print(z)
}
printMySting("A", "가", "B")
printMyString("A", "가", "B")
printMyString = function(x, y, z){
print(z)
print(y)
print(x)
}
printMyString("A", "가", "B")
myVec = c(1,2,3,4,5)
sum(myVec)
result <- sum(myVec)
result
a = print(3)
a
rm(a)
a
a = print(3)
a
rm(a)
a = cat(3)
a
library(xlsx)
library(rJava)
library(xlsx)
library(xlsx)
library(rjava)
library(rJava)
dir(paste0(system2('/usr/libexec/java_home',stdout = TRUE)))
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
dyn.load("/Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
library(rJava)
Sys.setenv("JAVA_HOME" = /Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home/jre)
Sys.setenv("JAVA_HOME" = "/Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home/jre")
dyn.load("/Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
getwd()
setwd("~/GitRepo/SNS_Data_Analyses/MetaDataAnalysis/")
data = read.csv("../data/upload_time_result_three_hour_binding.csv.csv")
library(pscl)
data = read.csv("../data/upload_time_result_three_hour_binding.csv")
head(data)
model = glm(IsDepress ~ X0 + X1 + X2 + X3 + X4 + X5 + X6 + X7,
family = 'binomial'(link = 'logit'), data = data)
summary(model)
model2 = glm(IsDepress ~ X0 + X1 + X2 + X3 + X4 + X5 + X7,
family = 'binomial'(link = 'logit'), data = data)
summary(model2)
model3 = glm(IsDepress ~ X0 + X1 + X2 + X3 + X5 + X7,
family = 'binomial'(link = 'logit'), data = data)
summary(model3)
model4 = glm(IsDepress ~ X0 + X1 + X2 + X5 + X7,
family = 'binomial'(link = 'logit'), data = data)
summary(model4)
model5 = glm(IsDepress ~ X0 + X1 + X2 + X5,
family = 'binomial'(link = 'logit'), data = data)
summary(model5)
model6 = glm(IsDepress ~ X0 + X1 + X2,
family = 'binomial'(link = 'logit'), data = data)
summary(model6)
model7 = glm(IsDepress ~ X0 + X2,
family = 'binomial'(link = 'logit'), data = data)
summary(model7)
model8 = glm(IsDepress ~ X0,
family = 'binomial'(link = 'logit'), data = data)
summary(model8)
rm(list=ls())
data = read.csv("../data/upload_time_result_two_hour_binding.csv")
head(data)
model = glm(IsDepress ~ X0 + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model)
data = read.csv("../data/upload_time_result_two_hour_binding.csv")
model = glm(IsDepress ~ X0 + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model)
model1 = glm(IsDepress ~ X0 + X1 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model1)
model2 = glm(IsDepress ~ X0 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model2)
model3 = glm(IsDepress ~ X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model3)
model7 = glm(IsDepress ~ X3 + X4 + X5 + X6 + X8 + X9 + X10 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model7)
model8 = glm(IsDepress ~ X3 + X5 + X6 + X8 + X9 + X10 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model8)
model9 = glm(IsDepress ~ X3 + X5 + X6 + X8 + X10 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model9)
model10 = glm(IsDepress ~ X3 + X5 + X6 + X8 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model10)
model11 = glm(IsDepress ~ X3 + X5 + X6 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model11)
model12 = glm(IsDepress ~ X3 + X6 + X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model12)
model13 = glm(IsDepress ~ X3 +  X11,
family = 'binomial'(link = 'logit'), data = data)
summary(model13)
rm(list=ls())
data = read.csv("../data/upload_time_result_six_hour_binding.csv")
model = glm(IsDepress ~ X0 + X1 + X2 + X3,
family = 'binomial'(link = 'logit'), data = data)
summary(model)
model1 = glm(IsDepress ~ X1 + X2 + X3,
family = 'binomial'(link = 'logit'), data = data)
summary(model1)
model2 = glm(IsDepress ~ X2 + X3,
family = 'binomial'(link = 'logit'), data = data)
summary(model2)
model2 = glm(IsDepress ~ X2,
family = 'binomial'(link = 'logit'), data = data)
summary(model2)
View(data)
print("신승현 바보 신승현 바보 신승현 바보 신승현 바보 신승현 바보")
for (i in range(1:10)){
print("신승현 바보 신승현 바보 신승현 바보 신승현 바보 신승현 바보")
}
range(1,10)
for (i in range(1,10)){
print("신승현 바보 신승현 바보 신승현 바보 신승현 바보 신승현 바보")
}
for (i in c(1:10)){
print("신승현 바보 신승현 바보 신승현 바보 신승현 바보 신승현 바보")
}
for (i in range(1:10)){
print("신승현 바보 신승현 바보 신승현 바보 신승현 바보 신승현 바보")
}
for (i in range(1,10)){
print("신승현 바보 신승현 바보 신승현 바보 신승현 바보 신승현 바보")
}
for (i in seq(1,10)){
print("신승현 바보 신승현 바보 신승현 바보 신승현 바보 신승현 바보")
}
for (i in range(1,10)){
print("신승현 바보 신승현 바보 신승현 바보 신승현 바보 신승현 바보")
}
for (i in range(1:10)){
print("신승현 바보 신승현 바보 신승현 바보 신승현 바보 신승현 바보")
}
for (i in 1:10){
print("신승현 바보 신승현 바보 신승현 바보 신승현 바보 신승현 바보")
}
1:10
test = 1:10
type(test)
typeof(test)
class(test)
is.vector(test)
range(1, 10)
?range
print(i)
for (i in 1:10){
print(i)
}
my_vector = c(1,2,3,4,5,6,7,8)
print(i)
for (i in my_vector){
print(i)
}
for (i in 1:length(my_vector)){
print(i)
print(my_vector[i])
}
for (i in 1:length(my_vector)){
paste0("this is idx: ", i)
paste0("this is value: " my_vector[i])
}
for (i in 1:length(my_vector)){
paste0("this is idx: ", i)
paste0("this is value: ", my_vector[i])
}
for (i in 1:length(my_vector)){
print(paste0("this is idx: ", i))
print(paste0("this is value: ", my_vector[i]))
}
my_vector = c(10:16)
for (i in 1:length(my_vector)){
print(paste0("this is idx: ", i))
print(paste0("this is value: ", my_vector[i]))
}
for (i in my_vector){
print(i)
}
